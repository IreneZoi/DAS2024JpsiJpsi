/*
* Author: Jingqing Zhang, jingqing@cern.ch
* Functions for the fit package 
* with/without interference between resonances (and SPS)
*/
/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MyRelBWSquare.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include <complex>

#include "ComplexRelBWFcn.h"

ClassImp(MyRelBWSquare); 

 MyRelBWSquare::MyRelBWSquare(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mass1,
                        RooAbsReal& _width1,
                        RooAbsReal& _L1,
                        RooAbsReal& _d1,
                        RooAbsReal& _coef1,
                        RooAbsReal& _phi1) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mass1("mass1","mass1",this,_mass1),
   width1("width1","width1",this,_width1),
   L1("L1","L1",this,_L1),
   d1("d1","d1",this,_d1),
   coef1("coef1","coef1",this,_coef1),
   phi1("phi1","phi1",this,_phi1)
 { 
 } 


 MyRelBWSquare::MyRelBWSquare(const MyRelBWSquare& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mass1("mass1",this,other.mass1),
   width1("width1",this,other.width1),
   L1("L1",this,other.L1),
   d1("d1",this,other.d1),
   coef1("coef1",this,other.coef1),
   phi1("phi1",this,other.phi1)
 { 
 } 

 Double_t MyRelBWSquare::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   std::complex<double> bw1 = ComplexRelBW(x, mass1, width1,
       L1, d1, coef1, phi1);
   double res = std::norm(bw1);
   return res ; 
 } 



