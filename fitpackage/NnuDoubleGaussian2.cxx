/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "NnuDoubleGaussian2.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "SigmaFcn.h"

ClassImp(NnuDoubleGaussian2); 

 NnuDoubleGaussian2::NnuDoubleGaussian2(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mean,
                        RooAbsReal& _frac1,
                        RooAbsReal& _mpeak,
                        RooAbsReal& _mth,
                        RooAbsReal& _a1,
                        RooAbsReal& _b1,
                        RooAbsReal& _c1,
                        RooAbsReal& _d1,
                        RooAbsReal& _e1,
                        RooAbsReal& _a2,
                        RooAbsReal& _b2,
                        RooAbsReal& _c2,
                        RooAbsReal& _d2,
                        RooAbsReal& _e2) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   frac1("frac1","frac1",this,_frac1),
   mpeak("mpeak","mpeak",this,_mpeak),
   mth("mth","mth",this,_mth),
   a1("a1","a1",this,_a1),
   b1("b1","b1",this,_b1),
   c1("c1","c1",this,_c1),
   d1("d1","d1",this,_d1),
   e1("e1","e1",this,_e1),
   a2("a2","a2",this,_a2),
   b2("b2","b2",this,_b2),
   c2("c2","c2",this,_c2),
   d2("d2","d2",this,_d2),
   e2("e2","e2",this,_e2)
 { 
 } 


 NnuDoubleGaussian2::NnuDoubleGaussian2(const NnuDoubleGaussian2& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   frac1("frac1",this,other.frac1),
   mpeak("mpeak",this,other.mpeak),
   mth("mth",this,other.mth),
   a1("a1",this,other.a1),
   b1("b1",this,other.b1),
   c1("c1",this,other.c1),
   d1("d1",this,other.d1),
   e1("e1",this,other.e1),
   a2("a2",this,other.a2),
   b2("b2",this,other.b2),
   c2("c2",this,other.c2),
   d2("d2",this,other.d2),
   e2("e2",this,other.e2)
 { 
 } 



 Double_t NnuDoubleGaussian2::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   double res = 0;
   if ((mpeak - mth) < 0.000001) return res;
   double sigma1 = NnuSigma(mpeak, mth, a1, b1, c1, d1, e1);
   double sigma2 = NnuSigma(mpeak, mth, a2, b2, c2, d2, e2);
   double gaus1 = 0, gaus2 = 0;
   if (sigma1 > 0) {
     gaus1 = TMath::Gaus(x, mean, sigma1, kTRUE); //norm
   } 
   if (sigma2 > 0) {
     gaus2 = TMath::Gaus(x, mean, sigma2, kTRUE); //norm
   }
   res = frac1 * gaus1 + (1 - frac1) * gaus2;
   return res;
 } 



