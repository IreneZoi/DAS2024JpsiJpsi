/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MiptDoubleGaussian.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

#include "SigmaFcn.h"

ClassImp(MiptDoubleGaussian); 

 MiptDoubleGaussian::MiptDoubleGaussian(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mean,
                        RooAbsReal& _frac2,
                        RooAbsReal& _shift,
                        RooAbsReal& _mth,
                        RooAbsReal& _w1,
                        RooAbsReal& _w2,
                        RooAbsReal& _beta) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   frac2("frac2","frac2",this,_frac2),
   shift("shift","shift",this,_shift),
   mth("mth","mth",this,_mth),
   w1("w1","w1",this,_w1),
   w2("w2","w2",this,_w2),
   beta("beta","beta",this,_beta)
 { 
 } 


 MiptDoubleGaussian::MiptDoubleGaussian(const MiptDoubleGaussian& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   frac2("frac2",this,other.frac2),
   shift("shift",this,other.shift),
   mth("mth",this,other.mth),
   w1("w1",this,other.w1),
   w2("w2",this,other.w2),
   beta("beta",this,other.beta)
 { 
 } 



 Double_t MiptDoubleGaussian::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   double res = 0;
   double xshift = x - shift;
   if (xshift < mth) return res;
   double sigma1 = MiptSigma(xshift, mth, w1, beta);
   double sigma2 = MiptSigma(xshift, mth, w2, beta);
   double gaus1 = 0, gaus2 = 0;
   if (sigma1 > 0) {
     gaus1 = TMath::Gaus(x, mean, sigma1, kTRUE); //norm
   } 
   if (sigma2 > 0) {
     gaus2 = TMath::Gaus(x, mean, sigma2, kTRUE); //norm
   }
   res = (1 - frac2) * gaus1 + frac2 * gaus2;
   return res;
 } 



